"use client"

import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import { useAuth } from "@/context/auth-context"
import {
  Search,
  Home,
  Library,
  Plus,
  ChevronLeft,
  ChevronRight,
  Play,
  SkipBack,
  SkipForward,
  Repeat,
  Shuffle,
  Mic2,
  ListMusic,
  Volume,
  Maximize2,
  Heart,
  MessageSquare,
  LogOut,
  User,
  ChevronDown,
  Pause,
  ArrowLeft,
  Bell,
  Music,
  X,
  MoreHorizontal,
  PlusCircle,
  CheckCircle
} from "lucide-react"
import Image from "next/image"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { Slider } from "@/components/ui/slider"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from "@/components/ui/dropdown-menu"
import postmanApi from "@/lib/api/postman"
import type { Playlist } from "@/types"
import { Input } from "@/components/ui/input"
import { useToast } from "@/hooks/use-toast"
import { usePlayer } from "@/components/player/PlayerContext"
import { PlayButton } from "@/components/music/PlayButton"

// Định nghĩa interface cho Artist
interface Artist {
  id: string
  name: string
  bio?: string
  image?: string
  monthly_listeners?: number
  type?: string
}

// Mở rộng interface Song để chấp nhận cả chuỗi và đối tượng Artist
interface ArtistObject {
  id: string;
  name: string;
}

type ArtistType = string | ArtistObject;

interface CustomSong {
  id: string;
  title: string;
  artist: ArtistType;
  album?: string;
  genre?: string;
  duration: number;
  lyrics?: string;
  audio_url?: string | null | undefined;
  audio_file?: string | null | undefined;
  cover_image?: string | null | undefined;
  play_count?: number;
  likes_count?: number;
}

// Interface phù hợp với API response cho playlist
interface CustomPlaylist {
  id: string | number;
  name: string;
  description?: string;
  is_public: boolean;
  cover_image: string | null;
  user?: {
    id: number | string;
    username: string;
    avatar: string | null;
  };
  songs_count: number;
  created_at: string;
  updated_at: string;
}

export default function DashboardPage() {
  const { user, logout } = useAuth()
  const router = useRouter()
  const { toast } = useToast()
  const { play, isPlaying, pause, resume, addToQueue, currentSong: playerCurrentSong, playlist: currentPlaylist } = usePlayer()
  const [trendingSongs, setTrendingSongs] = useState<CustomSong[]>([])
  const [recommendedSongs, setRecommendedSongs] = useState<CustomSong[]>([])
  const [playlists, setPlaylists] = useState<CustomPlaylist[]>([])
  const [artists, setArtists] = useState<Artist[]>([])
  const [loading, setLoading] = useState(true)
  const [currentSongData, setCurrentSongData] = useState<CustomSong | null>(null)
  const [isLibraryCollapsed, setIsLibraryCollapsed] = useState(false)
  const [searchQuery, setSearchQuery] = useState("")
  const [searchResults, setSearchResults] = useState<any>(null)
  const [recentPlays, setRecentPlays] = useState<any[]>([])
  const [topGenres, setTopGenres] = useState<any[]>([])

  // State cho trình phát nhạc
  const [currentTime, setCurrentTime] = useState(0)
  const [duration, setDuration] = useState(0)
  const [volume, setVolume] = useState(70)
  const [isMuted, setIsMuted] = useState(false)
  const [repeatMode, setRepeatMode] = useState(0) // 0: no repeat, 1: repeat all, 2: repeat one
  const [isShuffleOn, setIsShuffleOn] = useState(false)
  const [queue, setQueue] = useState<CustomSong[]>([])

  // Thêm dropdown menu cho hàng đợi nhạc
  const [showQueuePanel, setShowQueuePanel] = useState(false)

  // Hiển thị/ẩn panel hàng đợi
  const toggleQueuePanel = () => {
    setShowQueuePanel(!showQueuePanel)
  }

  // If user is not logged in, redirect to home page
  useEffect(() => {
    if (!user) {
      router.push("/")
    }
  }, [user, router])

  // Fetch data
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true)
        // Gọi các API đúng theo định nghĩa trong postman.ts
        let trendingData: CustomSong[] = [];
        let recommendedData: CustomSong[] = [];
        let playlistsData: CustomPlaylist[] = [];
        let artistsData: Artist[] = [];
        let personalData: any = { recent_plays: [], top_genres: [] };

        try {
          const trendingResponse: any = await postmanApi.music.getTrendingSongs();
          // Kiểm tra cấu trúc phản hồi API trending songs
          trendingData = trendingResponse.results || trendingResponse;

          // Log dữ liệu để kiểm tra URL chính xác


          // Xử lý URL đầy đủ - bỏ việc sửa URL vì đã là URL đầy đủ từ API
          trendingData = trendingData.map((song: any) => ({
            ...song,
            // Đảm bảo sử dụng đúng property từ API
            audio_url: song.audio_file,
            cover_image: song.cover_image
          }));
        } catch (err) {
          console.error("Error fetching trending songs:", err);
        }

        try {
          const recommendedResponse: any = await postmanApi.music.getRecommendedSongs();
          // Kiểm tra cấu trúc phản hồi API recommended songs
          recommendedData = recommendedResponse.results || recommendedResponse;

          // Xử lý URL đầy đủ - map audio_file sang audio_url giống với trending songs
          recommendedData = recommendedData.map((song: any) => ({
            ...song,
            audio_url: song.audio_file,
            cover_image: song.cover_image
          }));
        } catch (err) {
          console.error("Error fetching recommended songs:", err);
        }

        try {
          // Gọi API lấy danh sách playlist
          const playlistsResponse: any = await postmanApi.music.getUserPlaylists();

          // API trả về trực tiếp mảng hoặc có thể nằm trong thuộc tính results hoặc data
          if (Array.isArray(playlistsResponse)) {
            playlistsData = playlistsResponse;
          } else if (playlistsResponse.results && Array.isArray(playlistsResponse.results)) {
            playlistsData = playlistsResponse.results;
          } else if (playlistsResponse.data && Array.isArray(playlistsResponse.data)) {
            playlistsData = playlistsResponse.data;
          }

        } catch (err) {
          console.error("Error fetching playlists:", err);
        }

        try {
          const artistsResponse: any = await postmanApi.music.getArtists();
          // Kiểm tra cấu trúc phản hồi API artists
          artistsData = artistsResponse.data || artistsResponse;
        } catch (err) {
          console.error("Error fetching artists:", err);
        }

        // Fetch personal data
        try {
          // Gọi API personal để lấy thông tin cá nhân
          const personalResponse: any = await postmanApi.music.getPersonalTrends();
          personalData = personalResponse;
        } catch (err) {
          console.error("Error fetching personal data:", err);
        }

        setTrendingSongs(trendingData)
        setRecommendedSongs(recommendedData)
        setPlaylists(playlistsData)
        setArtists(artistsData)
        setRecentPlays(personalData.recent_plays || [])
        setTopGenres(personalData.top_genres || [])

        // Set a default current song (first trending song)
        if (trendingData.length > 0 && !currentSongData) {
          setCurrentSongData(trendingData[0])
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error)
      } finally {
        setLoading(false)
      }
    }

    if (user) {
      fetchData()
    }
  }, [user])

  const togglePlayPause = () => {
    if (isPlaying) {
      pause();
    } else {
      resume();
    }
  }

  const playSong = (song: CustomSong) => {
    setCurrentSongData(song);

    // Chuyển đổi CustomSong sang định dạng SongType
    const songToPlay = {
      id: Number(song.id),
      title: song.title,
      duration: String(song.duration),
      file_url: song.audio_url || '',
      image_url: song.cover_image || null,
      album: null,
      artist: typeof song.artist === 'string'
        ? { id: 0, name: song.artist, avatar: null }
        : { id: Number(song.artist.id), name: song.artist.name, avatar: null },
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    play(songToPlay);
  }

  const toggleLibrary = () => {
    setIsLibraryCollapsed(!isLibraryCollapsed)
  }


  // Xử lý tìm kiếm
  const handleSearch = async () => {
    if (!searchQuery.trim()) return

    try {
      const results = await postmanApi.music.search(searchQuery)
      // Kiểm tra cấu trúc phản hồi API search
      setSearchResults(results)
    } catch (error) {
      console.error("Search error:", error)
      toast({
        title: "Lỗi tìm kiếm",
        description: "Không thể thực hiện tìm kiếm. Vui lòng thử lại sau.",
        variant: "destructive",
      })
    }
  }

  // Hàm chuyển đổi ID sang chuỗi để so sánh
  const isSameId = (id1: any, id2: any): boolean => {
    return String(id1) === String(id2);
  }

  // Xử lý thêm vào danh sách phát
  const handleAddToQueue = (e: React.MouseEvent, song: any) => {
    e.stopPropagation();

    // Kiểm tra nếu bài hát đang phát
    if (playerCurrentSong && isSameId(playerCurrentSong.id, song.id)) {
          toast({
        title: "Bài hát đang phát",
        description: `"${song.title}" đang được phát.`,
      });
      return;
    }

    // Kiểm tra nếu bài hát đã có trong hàng đợi
    if (currentPlaylist && currentPlaylist.some(item => isSameId(item.id, song.id) && !isSameId(item.id, playerCurrentSong?.id))) {
            toast({
        title: "Đã có trong hàng đợi",
        description: `"${song.title}" đã có trong danh sách phát.`,
      });
      return;
    }

    try {
      // Lấy URL audio từ audio_file hoặc audio_url
      const audioSource = song.audio_file || song.audio_url || '';

      // Chuyển đổi sang định dạng SongType để sử dụng với PlayerContext
      const songToQueue = {
        id: Number(song.id),
        title: song.title,
        duration: String(song.duration),
        file_url: audioSource,
        image_url: song.cover_image || null,
        album: null,
        artist: typeof song.artist === 'string'
          ? { id: 0, name: song.artist, avatar: null }
          : { id: Number(song.artist.id), name: song.artist.name, avatar: null },
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      // Thêm vào hàng đợi
      addToQueue(songToQueue);

      // Thêm vào hàng đợi local để hiển thị
      setQueue(prev => [...prev, song]);

      toast({
        title: "Đã thêm vào hàng đợi",
        description: `Đã thêm "${song.title}" vào danh sách phát.`,
      });
    } catch (error) {
      console.error("Lỗi khi thêm vào hàng đợi:", error);
      toast({
        title: "Lỗi",
        description: "Không thể thêm bài hát vào hàng đợi. Vui lòng thử lại sau.",
        variant: "destructive",
      });
    }
  }

  // Xóa bài hát khỏi hàng đợi
  const removeFromQueue = async (index: number) => {
    try {
      // Xóa bài hát khỏi hàng đợi trong state
      const newQueue = [...queue]
      newQueue.splice(index, 1)
      setQueue(newQueue)

      // Gọi API để xóa khỏi hàng đợi trên server (nếu có)
      await postmanApi.music.removeFromQueue(index)

      toast({
        title: "Đã xóa khỏi hàng đợi",
        description: "Bài hát đã được xóa khỏi hàng đợi phát nhạc",
      })
    } catch (error) {
      console.error("Error removing from queue:", error)
      toast({
        title: "Lỗi",
        description: "Không thể xóa bài hát khỏi hàng đợi. Vui lòng thử lại sau.",
        variant: "destructive",
      })
    }
  }

  // Xóa toàn bộ hàng đợi
  const clearQueue = async () => {
    try {
      // Xóa hàng đợi trong state
      setQueue([])

      // Gọi API để xóa hàng đợi trên server (nếu có)
      await postmanApi.music.clearQueue()

      toast({
        title: "Đã xóa hàng đợi",
        description: "Toàn bộ hàng đợi phát nhạc đã được xóa",
      })
    } catch (error) {
      console.error("Error clearing queue:", error)
      toast({
        title: "Lỗi",
        description: "Không thể xóa hàng đợi phát nhạc. Vui lòng thử lại sau.",
        variant: "destructive",
      })
    }
  }

  // Xử lý phát nhạc từ recent plays
  const playRecentSong = async (songData: any) => {
    try {


      // Lấy URL audio từ audio_file hoặc audio_url
      const audioSource = songData.audio_file || songData.audio_url || '';

      // Tạo đối tượng SongType từ dữ liệu API
      const songToPlay = {
        id: Number(songData.id),
        title: songData.title,
        duration: String(songData.duration),
        file_url: audioSource,
        image_url: songData.cover_image || null,
        album: null,
        artist: typeof songData.artist === 'string'
          ? { id: 0, name: songData.artist, avatar: null }
          : { id: Number(songData.artist.id), name: songData.artist.name, avatar: null },
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      // Lưu thông tin bài hát hiện tại
      const customSong: CustomSong = {
        id: songData.id,
        title: songData.title,
        artist: songData.artist,
        cover_image: songData.cover_image,
        duration: songData.duration,
        audio_url: audioSource
      };

      setCurrentSongData(customSong);
      // Sử dụng PlayerContext để phát nhạc
      play(songToPlay);

    } catch (error) {
      console.error("Error playing recent song:", error);
      toast({
        title: "Lỗi phát nhạc",
        description: "Không thể phát bài hát từ lịch sử. Vui lòng thử lại sau.",
        variant: "destructive",
      });
    }
  };

  // Xử lý điều hướng đến trang thể loại
  const navigateToGenre = (genreName: string) => {
    router.push(`/genre?name=${encodeURIComponent(genreName)}`);
  };

  // Component hiển thị hàng đợi
  function QueuePanel() {
    if (!showQueuePanel) return null

    return (
      <div className="absolute bottom-20 right-4 w-80 bg-zinc-900 border border-white/10 rounded-lg shadow-xl p-4 z-50">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-sm font-medium">Hàng đợi phát nhạc</h3>
          <div className="flex gap-2">
            <Button
              variant="ghost"
              size="sm"
              className="text-xs text-white/70 hover:text-white"
              onClick={clearQueue}
              disabled={queue.length === 0}
            >
              Xóa tất cả
            </Button>
            <Button
              variant="ghost"
              size="icon"
              className="h-6 w-6 text-white/70 hover:text-white"
              onClick={toggleQueuePanel}
            >
              <ChevronDown className="h-4 w-4" />
            </Button>
          </div>
        </div>

        {queue.length === 0 ? (
          <div className="text-sm text-white/50 py-4 text-center">
            Hàng đợi trống
          </div>
        ) : (
          <div className="overflow-y-auto max-h-60 pr-2 -mr-2">
            {queue.map((song: CustomSong, index: number) => (
              <div
                key={`${song.id}-${index}`}
                className="flex items-center gap-2 py-2 group relative hover:bg-white/5 rounded-md px-1"
              >
                <div className="relative w-10 h-10 flex-shrink-0">
                  <Image
                    src={song.cover_image || "/placeholder.svg?height=40&width=40"}
                    fill
                    className="rounded object-cover"
                    alt={song.title}
                  />
                </div>
                <div className="flex-1 min-w-0">
                  <div className="text-sm line-clamp-1">{song.title}</div>
                  <div className="text-xs text-white/50 line-clamp-1">
                    {typeof song.artist === 'string' ? song.artist : (song.artist as ArtistObject)?.name || 'Unknown Artist'}
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-6 w-6 opacity-0 group-hover:opacity-100 text-white/70 hover:text-white"
                  onClick={() => removeFromQueue(index)}
                >
                  <X className="h-3 w-3" />
                </Button>
              </div>
            ))}
          </div>
        )}
      </div>
    )
  }

  // Xử lý phát nhạc
  const handlePlaySong = async (song: CustomSong) => {
    try {
      // Kiểm tra song.audio_url, nếu không có thì dùng song.audio_file
      const audioSource = song.audio_url || song.audio_file;

      if (currentSongData && isSameId(currentSongData.id, song.id)) {
        // Toggle play/pause nếu đang phát bài hát đó
        if (isPlaying) {
          pause();
        } else {
          resume();
        }
      } else {
        // Ghi nhận lượt phát
        await postmanApi.music.playSong(String(song.id));

        // Chuyển đổi sang định dạng SongType để sử dụng với PlayerContext
        const songToPlay = {
          id: Number(song.id),
          title: song.title,
          duration: String(song.duration),
          file_url: audioSource || '', // Sử dụng audioSource đã xác định
          image_url: song.cover_image || null,
          album: null,
          artist: typeof song.artist === 'string'
            ? { id: 0, name: song.artist, avatar: null }
            : { id: Number(song.artist.id), name: song.artist.name, avatar: null },
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        };

        // Phát bài hát sử dụng PlayerContext
        setCurrentSongData(song);
        play(songToPlay);

        // Các giá trị thời gian sẽ được quản lý bởi PlayerBar
        setCurrentTime(0);
        setDuration(song.duration || 0);
      }
    } catch (error) {
      console.error("Error playing song:", error);
      toast({
        title: "Lỗi phát nhạc",
        description: "Không thể phát bài hát. Vui lòng thử lại sau.",
        variant: "destructive",
      });
    }
  }

  // Hàm xử lý khi bài hát kết thúc
  const handleSongEnd = () => {
    if (repeatMode === 2 && currentSongData) {
      // Nếu chế độ lặp lại một bài, phát lại bài hiện tại
      handlePlaySong(currentSongData)
    } else if (queue.length > 0) {
      // Nếu có bài hát trong hàng đợi, phát bài tiếp theo
      const nextSong = queue[0]
      const newQueue = [...queue.slice(1)]
      setQueue(newQueue)
      handlePlaySong(nextSong)
    } else if (repeatMode === 1) {
      // Nếu chế độ lặp lại tất cả, quay lại bài đầu tiên
      // Giả sử bạn có một danh sách bài hát trong playlist đang phát
      if (trendingSongs.length > 0) {
        handlePlaySong(trendingSongs[0])
      }
    }
  }

  // Hàm điều chỉnh âm lượng
  const handleVolumeChange = (newVolume: number[]) => {
    const volumeValue = newVolume[0]
    setVolume(volumeValue)
  }

  // Hàm tắt/bật âm thanh
  const toggleMute = () => {
    setIsMuted(!isMuted)
  }

  // Hàm tua bài hát
  const handleSeek = (newTime: number[]) => {
    const seekTime = newTime[0]
    setCurrentTime(seekTime)

    if (currentSongData) {
      // In a real app, you would trigger the audio player to seek to the new time
    }
  }

  // Hàm chuyển bài tiếp theo
  const playNextSong = () => {
    if (queue.length > 0) {
      // Nếu có bài trong hàng đợi, phát bài đầu tiên
      const nextSong = queue[0]
      const newQueue = [...queue.slice(1)]
      setQueue(newQueue)
      handlePlaySong(nextSong)
    } else if (currentSongData && trendingSongs.length > 0) {
      // Tìm bài hát hiện tại trong danh sách trending
      const currentIndex = trendingSongs.findIndex(song => isSameId(song.id, currentSongData.id))

      if (currentIndex !== -1 && currentIndex < trendingSongs.length - 1) {
        // Nếu không phải bài cuối cùng, phát bài tiếp theo
        handlePlaySong(trendingSongs[currentIndex + 1])
      } else if (repeatMode === 1) {
        // Nếu là bài cuối cùng và chế độ lặp lại tất cả, quay lại bài đầu tiên
        handlePlaySong(trendingSongs[0])
      }
    }
  }

  // Hàm chuyển về bài trước
  const playPreviousSong = () => {
    if (currentSongData && trendingSongs.length > 0) {
      // Tìm bài hát hiện tại trong danh sách trending
      const currentIndex = trendingSongs.findIndex(song => isSameId(song.id, currentSongData.id))

      if (currentIndex > 0) {
        // Nếu không phải bài đầu tiên, phát bài trước đó
        handlePlaySong(trendingSongs[currentIndex - 1])
      } else if (repeatMode === 1) {
        // Nếu là bài đầu tiên và chế độ lặp lại tất cả, chuyển đến bài cuối cùng
        handlePlaySong(trendingSongs[trendingSongs.length - 1])
      }
    }
  }

  // Hàm thay đổi chế độ lặp lại
  const toggleRepeat = () => {
    setRepeatMode((prevMode) => (prevMode + 1) % 3)
  }

  // Hàm bật/tắt chế độ trộn bài
  const toggleShuffle = () => {
    setIsShuffleOn(!isShuffleOn)
  }

  // Định dạng thời gian
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = Math.floor(seconds % 60)
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  // Xử lý thích bài hát
  const handleLikeSong = async (song: CustomSong) => {
    try {
      await postmanApi.music.likeSong(song.id)
      toast({
        title: "Đã thích",
        description: `Đã thêm "${song.title}" vào danh sách yêu thích`,
      })
    } catch (error) {
      console.error("Error liking song:", error)
      toast({
        title: "Lỗi",
        description: "Không thể thích bài hát. Vui lòng thử lại sau.",
        variant: "destructive",
      })
    }
  }

  if (!user) {
    return null // Don't render anything while checking authentication
  }

  return (
    <div className="h-screen flex flex-col bg-black text-white overflow-hidden">
      {/* Top bar */}
      <div className="flex items-center justify-between p-4 bg-black/90">
        <div className="flex items-center gap-6">
          <div className="flex items-center gap-2">
            <svg viewBox="0 0 78 24" width="78" height="24" className="text-white">
              <path
                fill="currentColor"
                d="M18.616 10.639c-3.77-2.297-9.99-2.509-13.59-1.388a1.077 1.077 0 0 1-1.164-.363 1.14 1.14 0 0 1-.119-1.237c.136-.262.37-.46.648-.548 4.132-1.287 11-1.038 15.342 1.605a1.138 1.138 0 0 1 .099 1.863 1.081 1.081 0 0 1-.813.213c-.142-.02-.28-.07-.403-.145Zm-.124 3.402a.915.915 0 0 1-.563.42.894.894 0 0 1-.69-.112c-3.144-1.983-7.937-2.557-11.657-1.398a.898.898 0 0 1-.971-.303.952.952 0 0 1-.098-1.03.929.929 0 0 1 .54-.458c4.248-1.323 9.53-.682 13.14 1.595a.95.95 0 0 1 .3 1.286Zm-1.43 3.267a.73.73 0 0 1-.45.338.712.712 0 0 1-.553-.089c-2.748-1.722-6.204-2.111-10.276-1.156a.718.718 0 0 1-.758-.298.745.745 0 0 1-.115-.265.757.757 0 0 1 .092-.563.737.737 0 0 1 .457-.333c4.455-1.045 8.277-.595 11.361 1.338a.762.762 0 0 1 .241 1.028ZM11.696 0C5.237 0 0 5.373 0 12c0 6.628 5.236 12 11.697 12 6.46 0 11.698-5.372 11.698-12 0-6.627-5.238-12-11.699-12h.001Z"
              />
            </svg>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <Link href="/messenger">
            <Button variant="ghost" size="icon" className="rounded-full bg-black/20 text-white">
              <MessageSquare className="h-4 w-4" />
            </Button>
          </Link>
          <Link href="/search">
            <Button variant="ghost" size="icon" className="rounded-full bg-black/20 text-white">
              <Search className="h-4 w-4" />
            </Button>
          </Link>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <div className="flex items-center gap-2 bg-black/20 rounded-full p-1 cursor-pointer hover:bg-black/30 transition-colors">
                <Image
                  src={user?.profile_image || "/placeholder.svg?height=32&width=32"}
                  width={32}
                  height={32}
                  alt="Profile"
                  className="rounded-full"
                />
                <ChevronDown className="h-4 w-4 mr-1 text-white/70" />
              </div>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56 bg-zinc-800 border-zinc-700 text-white">
              <DropdownMenuItem
                className="cursor-pointer hover:bg-zinc-700 focus:bg-zinc-700"
                onClick={() => router.push("/account")}
              >
                <User className="mr-2 h-4 w-4" />
                <span>Tài khoản</span>
              </DropdownMenuItem>
              <DropdownMenuItem className="cursor-pointer hover:bg-zinc-700 focus:bg-zinc-700" onClick={logout}>
                <LogOut className="mr-2 h-4 w-4" />
                <span>Đăng xuất</span>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>

      <div className="flex flex-1 overflow-hidden">
        {/* Sidebar */}
        <div
          className={`${isLibraryCollapsed ? "w-20" : "w-64"} flex-shrink-0 bg-black p-4 hidden md:block transition-all duration-300`}
        >
          <div className="flex flex-col gap-6">
            <div className="flex flex-col gap-2">
              <Button
                variant="ghost"
                className={`justify-start text-white/70 hover:text-white ${isLibraryCollapsed ? "px-3" : ""}`}
              >
                <Home className="mr-2 h-5 w-5" />
                {!isLibraryCollapsed && <span>Trang chủ</span>}
              </Button>
              <Link href="/search" className="w-full">
                <Button
                  variant="ghost"
                  className={`justify-start text-white/70 hover:text-white w-full ${isLibraryCollapsed ? "px-3" : ""}`}
                >
                  <Search className="mr-2 h-5 w-5" />
                  {!isLibraryCollapsed && <span>Tìm kiếm</span>}
                </Button>
              </Link>
              <div className="flex items-center">
                <Link href="/library" className={`${isLibraryCollapsed ? "w-12" : "flex-1"}`}>
                  <Button
                    variant="ghost"
                    className={`justify-start text-white/70 hover:text-white ${isLibraryCollapsed ? "w-12 px-3" : "w-full"}`}
                  >
                    <Library className="mr-2 h-5 w-5" />
                    {!isLibraryCollapsed && <span>Thư viện</span>}
                  </Button>
                </Link>
                <div
                  className="p-1 rounded-full hover:bg-zinc-800 cursor-pointer group"
                  onClick={toggleLibrary}
                  title="Thu gọn thư viện"
                >
                  {isLibraryCollapsed ? (
                    <ChevronRight className="h-5 w-5 text-white/70" />
                  ) : (
                    <ArrowLeft className="h-5 w-5 text-white/70" />
                  )}
                  <span className="sr-only">Thu gọn thư viện</span>
                </div>
              </div>
            </div>
            {!isLibraryCollapsed && (
              <>
                <div className="flex flex-col gap-2">
                  <Link href="/create-playlist" className="w-full">
                    <Button variant="ghost" className="justify-start text-white/70 hover:text-white w-full">
                      <Plus className="mr-2 h-5 w-5" />
                      Tạo playlist
                    </Button>
                  </Link>
                  <Link href="/liked-songs" className="w-full">
                    <Button variant="ghost" className="justify-start text-white/70 hover:text-white w-full">
                      <Heart className="mr-2 h-5 w-5" />
                      Bài hát đã thích
                    </Button>
                  </Link>
                </div>
                <div className="border-t border-white/10 pt-4">
                  <div className="flex items-center justify-between mb-4">
                    <span className="text-sm font-medium">Danh sách phát</span>
                    <Button variant="ghost" size="sm" className="text-white/70 hover:text-white">
                      Gần đây
                    </Button>
                  </div>
                  <div className="space-y-2">
                    <div className="flex items-center gap-3 p-2 rounded hover:bg-white/10 cursor-pointer">
                      <div className="w-10 h-10 bg-purple-600 flex items-center justify-center rounded">
                        <Heart className="h-5 w-5 text-white" />
                      </div>
                      <div>
                        <div className="text-sm font-medium">Bài hát đã thích</div>
                        <div className="text-xs text-white/70">Danh sách phát • 4 bài hát</div>
                      </div>
                    </div>
                    {(playlists.length > 0 ? playlists : []).slice(0, 3).map((playlist) => (
                      <Link href={`/playlist/${playlist.id}`} key={playlist.id}>
                        <div className="flex items-center gap-3 p-2 rounded hover:bg-white/10 cursor-pointer">
                          <Image
                            src={playlist.cover_image || `/placeholder.svg?height=40&width=40&text=${playlist.name.charAt(0)}`}
                            width={40}
                            height={40}
                            alt={playlist.name}
                            className="rounded"
                          />
                          <div>
                            <div className="text-sm font-medium">{playlist.name}</div>
                            <div className="text-xs text-white/70">
                              Danh sách phát • {playlist.user?.username || user.username}
                            </div>
                          </div>
                        </div>
                      </Link>
                    ))}
                  </div>
                </div>
              </>
            )}
            {isLibraryCollapsed && (
              <div className="flex flex-col items-center gap-4 mt-2">
                <Button variant="ghost" size="icon" className="rounded-full">
                  <Plus className="h-5 w-5" />
                </Button>
                <Button variant="ghost" size="icon" className="rounded-full">
                  <Heart className="h-5 w-5" />
                </Button>
              </div>
            )}
          </div>
        </div>

        {/* Main content */}
        <div className="flex-1 overflow-auto bg-gradient-to-b from-zinc-900 to-black">
          <div className="p-6">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-2">
                <Button variant="ghost" size="icon" className="rounded-full bg-black/20 text-white">
                  <ChevronLeft className="h-4 w-4" />
                </Button>
                <Button variant="ghost" size="icon" className="rounded-full bg-black/20 text-white">
                  <ChevronRight className="h-4 w-4" />
                </Button>
              </div>
              <div className="flex items-center gap-2">
                <Button className="bg-white text-black hover:bg-white/90">Nâng cấp</Button>
                <Button variant="ghost" size="icon" className="rounded-full bg-black/20 text-white">
                  <Bell className="h-4 w-4" />
                </Button>
              </div>
            </div>

            <Tabs defaultValue="all" className="mb-8">
              <TabsList className="bg-transparent">
                <TabsTrigger value="all" className="data-[state=active]:bg-zinc-800">
                  Tất cả
                </TabsTrigger>
                <TabsTrigger value="music" className="data-[state=active]:bg-zinc-800">
                  Âm nhạc
                </TabsTrigger>
                <TabsTrigger value="podcasts" className="data-[state=active]:bg-zinc-800">
                  Podcasts
                </TabsTrigger>
              </TabsList>

              <TabsContent value="all">
            {/* Phát gần đây */}
            {recentPlays.length > 0 && (
              <div className="mb-8">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-2xl font-bold">Phát gần đây</h2>
                  <Button variant="link" className="text-white/70 hover:text-white">
                    Xem lịch sử
                  </Button>
                </div>
                    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                      {recentPlays.slice(0, 4).map((item, index) => (
                    <div
                      key={item.id}
                      className="bg-zinc-800/50 p-4 rounded-lg hover:bg-zinc-800/80 transition cursor-pointer group"
                      onClick={() => playRecentSong(item.song)}
                    >
                      <div className="relative">
                        <Image
                          src={item.song.cover_image || `/placeholder.svg?height=160&width=160&text=${index + 1}`}
                          width={160}
                          height={160}
                          alt={item.song.title}
                          className="rounded mb-4 w-full"
                        />
                        <div className="absolute bottom-6 left-4 bg-blue-500 text-black px-2 py-1 text-xs font-medium rounded">
                          Gần đây
                        </div>
                        <Button
                          size="icon"
                          className="absolute bottom-20 right-4 rounded-full bg-green-500 text-black opacity-0 group-hover:opacity-100 transition shadow-lg"
                          onClick={(e) => {
                            e.stopPropagation()
                            playRecentSong(item.song)
                          }}
                        >
                          <Play className="h-5 w-5 ml-0.5" />
                        </Button>
                            <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
                              <DropdownMenu>
                                <DropdownMenuTrigger asChild>
                                  <Button
                                    variant="ghost"
                                    size="icon"
                                    className="h-8 w-8 rounded-full bg-black/60 hover:bg-black/80 text-white"
                                    onClick={(e) => e.stopPropagation()}
                                  >
                                    <MoreHorizontal className="h-4 w-4" />
                                  </Button>
                                </DropdownMenuTrigger>
                                <DropdownMenuContent className="w-56 bg-zinc-900 border-zinc-800 text-white">
                                  <DropdownMenuItem
                                    className="cursor-pointer hover:bg-zinc-800"
                                    onClick={(e) => handleAddToQueue(e, item.song)}
                                  >
                                    {playerCurrentSong && isSameId(playerCurrentSong.id, item.song.id) ? (
                                      <>
                                        <CheckCircle className="mr-2 h-4 w-4 text-green-500" />
                                        <span>Đang phát</span>
                                      </>
                                    ) : currentPlaylist && currentPlaylist.some(pItem => isSameId(pItem.id, item.song.id) && !isSameId(pItem.id, playerCurrentSong?.id)) ? (
                                      <>
                                        <CheckCircle className="mr-2 h-4 w-4 text-green-500" />
                                        <span>Đã có trong hàng đợi</span>
                                      </>
                                    ) : (
                                      <>
                                        <PlusCircle className="mr-2 h-4 w-4" />
                                        <span>Thêm vào hàng đợi</span>
                                      </>
                                    )}
                                  </DropdownMenuItem>
                                  <DropdownMenuSeparator className="bg-zinc-800" />
                                  <DropdownMenuItem
                                    className="cursor-pointer hover:bg-zinc-800"
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      toast({
                                        title: "Tính năng đang phát triển",
                                        description: "Chức năng thêm vào playlist sẽ được cập nhật trong phiên bản tiếp theo.",
                                      });
                                    }}
                                  >
                                    <ListMusic className="mr-2 h-4 w-4" />
                                    <span>Thêm vào playlist</span>
                                  </DropdownMenuItem>
                                </DropdownMenuContent>
                              </DropdownMenu>
                      </div>
                          </div>
                          <div className="text-sm font-medium line-clamp-1">{item.song.title}</div>
                          <div className="text-xs text-white/70 line-clamp-1 mt-1">
                        {item.song.artist}
                      </div>
                          <div className="text-xs text-white/50 mt-1">
                            {new Date(item.played_at).toLocaleDateString('vi-VN')}
                    </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

                {/* Các phần khác trong tab "Tất cả" */}
                {/* Thể loại yêu thích, danh sách phát, khuyên dùng, xu hướng... */}
              </TabsContent>

              <TabsContent value="music">
            <div className="mb-8">
                  <h2 className="text-2xl font-bold mb-4">Tất cả bài hát</h2>

                  <div className="bg-zinc-900/30 rounded-md">
                    <div className="grid grid-cols-[auto_1fr_auto_auto] gap-4 p-4 border-b border-white/5 text-sm text-zinc-400">
                      <div className="w-10 text-center">#</div>
                      <div>Tiêu đề</div>
                      <div className="w-32 text-right">Thời lượng</div>
                      <div className="w-20"></div>
            </div>

                    {trendingSongs.concat(recommendedSongs).map((song, index) => (
                      <div
                        key={`${song.id}-${index}`}
                        className="grid grid-cols-[auto_1fr_auto_auto] gap-4 p-4 hover:bg-white/5 items-center group"
                      >
                        <div className="w-10 text-center text-zinc-400">
                          <span className="group-hover:hidden">{index + 1}</span>
                          <button
                            className="hidden group-hover:block"
                    onClick={() => handlePlaySong(song)}
                  >
                            {playerCurrentSong && isSameId(playerCurrentSong.id, song.id) && isPlaying ? (
                              <Pause className="h-4 w-4" />
                            ) : (
                              <Play className="h-4 w-4" />
                            )}
                          </button>
                        </div>

                        <div className="flex items-center gap-3 min-w-0">
                          <div className="relative h-10 w-10 flex-shrink-0">
                      <Image
                              src={song.cover_image || "/placeholder.svg?height=40&width=40"}
                        alt={song.title}
                              fill
                              className="object-cover rounded"
                      />
                      </div>
                          <div className="min-w-0">
                            <div className="font-medium truncate">{song.title}</div>
                            <div className="text-sm text-zinc-400 truncate">
                      {typeof song.artist === 'string' ? song.artist : (song.artist as ArtistObject)?.name || 'Unknown Artist'}
                    </div>
              </div>
            </div>

                        <div className="w-32 text-zinc-400 text-right">
                          {formatTime(song.duration)}
              </div>

                        <div className="w-20 flex justify-end gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
                          <button
                        onClick={(e) => {
                              e.stopPropagation();
                              handleLikeSong(song);
                            }}
                            className="p-2 rounded-full hover:bg-white/10"
                            title="Thích"
                          >
                            <Heart className="h-4 w-4" />
                          </button>

                          <button
                            onClick={(e) => handleAddToQueue(e, song)}
                            className="p-2 rounded-full hover:bg-white/10"
                            title="Thêm vào hàng đợi"
                          >
                            <Plus className="h-4 w-4" />
                          </button>
                      </div>
                    </div>
                ))}
              </div>
            </div>
              </TabsContent>

              <TabsContent value="podcasts">
                <div className="flex items-center justify-center h-64 bg-zinc-900/30 rounded-md">
                  <div className="text-center">
                    <h3 className="text-xl font-bold mb-2">Tính năng đang phát triển</h3>
                    <p className="text-zinc-400">Chức năng podcast sẽ sớm được cập nhật</p>
                </div>
              </div>
              </TabsContent>
            </Tabs>
            </div>
        </div>
        </div>

      {/* Player - Xóa thanh player cũ này vì đã có PlayerBar từ layout.tsx */}

      </div>
  );
}
