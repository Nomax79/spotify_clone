Hệ thống Account / Authentication cho Backend Django với JWT và REST Framework
✅ 1. Đăng ký tài khoản người dùng
Endpoint:
POST /api/v1/accounts/users/

Request body:
{
  "username": "example",
  "email": "user@gmail.com",
  "password": "securepassword123",
  "first_name": "Nguyễn",
  "last_name": "Văn A",
  "bio": "Mô tả cá nhân"
}

Yêu cầu:
Email phải là địa chỉ Gmail (@gmail.com)
Mật khẩu phải có ít nhất 8 ký tự
Response:

{
  "id": 1,
  "username": "example",
  "email": "user@gmail.com",
  "first_name": "Nguyễn",
  "last_name": "Văn A",
  "avatar": null,
  "bio": "Mô tả cá nhân",
  "is_admin": false
}

Lỗi:
400 Bad Request: Nếu username/email đã tồn tại hoặc dữ liệu không hợp lệ
🔐 2. Đăng nhập (Login)
Endpoint:
POST /api/v1/auth/token/

Request body:
{
  "username": "user@gmail.com",
  "password": "securepassword123"
}
Lưu ý: Hệ thống sử dụng email làm tên đăng nhập (USERNAME_FIELD = 'email')
Response:
{
  "access": "<JWT_ACCESS_TOKEN>",
  "refresh": "<JWT_REFRESH_TOKEN>",
  "user": {
    "id": 1,
    "username": "example",
    "email": "user@gmail.com",
    "first_name": "Nguyễn",
    "last_name": "Văn A",
    "avatar": null,
    "bio": "Mô tả cá nhân",
    "is_admin": false
  }
}
Lỗi:
401 Unauthorized: Nếu thông tin đăng nhập không chính xác
Hướng dẫn frontend:
Lưu access token và refresh token vào localStorage hoặc httpOnly cookie
Lưu thông tin user để hiển thị trên giao diện
Sử dụng access token để gọi các API yêu cầu xác thực
Refresh token khi access token hết hạn
3. Làm mới access token
POST /api/v1/auth/token/refresh/
Request body:
{
  "refresh": "<JWT_REFRESH_TOKEN>"
}
Response:
{
  "access": "<NEW_JWT_ACCESS_TOKEN>"
}
Lỗi:
401 Unauthorized: Nếu refresh token không hợp lệ hoặc đã hết hạn
Hướng dẫn frontend:
Khi nhận lỗi 401 từ API, gọi endpoint refresh token
Nếu refresh thành công, cập nhật access token mới và thử lại request ban đầu
Nếu refresh thất bại, chuyển hướng người dùng về trang đăng nhập
❓ 4. Quên mật khẩu
Bước 1 - Gửi email reset:
Endpoint:
POST /api/v1/accounts/password/reset/
{
  "email": "user@gmail.com"
}
{
  "message": "Mã xác nhận đã được gửi đến email của bạn."
}
Lưu ý: Hệ thống gửi mã OTP 6 chữ số qua email, có hiệu lực trong 15 phút
Bước 2 - Xác nhận và đặt lại mật khẩu:
POST /api/v1/accounts/password/reset/confirm/
Request body:
{
  "email": "user@gmail.com",
  "token": "123456",
  "new_password": "newSecurePassword123"
}
Response:
{
  "message": "Đặt lại mật khẩu thành công. Vui lòng đăng nhập với mật khẩu mới."
}
Lỗi:
400 Bad Request: Nếu mã OTP không hợp lệ hoặc đã hết hạn
404 Not Found: Nếu email không tồn tại
Hướng dẫn frontend:
Hiển thị form nhập email để gửi mã OTP
Sau khi gửi email, hiển thị form nhập mã OTP và mật khẩu mới
Hiển thị đồng hồ đếm ngược 15 phút cho thời hạn mã OTP
Sau khi đặt lại thành công, chuyển hướng người dùng đến trang đăng nhập
5. Thông tin người dùng hiện tại
Endpoint:
GET /api/v1/accounts/users/me/
Headers:
Authorization: Bearer <JWT_ACCESS_TOKEN>
Response:
{
  "id": 1,
  "username": "example",
  "email": "user@gmail.com",
  "first_name": "Nguyễn",
  "last_name": "Văn A",
  "avatar": null,
  "bio": "Mô tả cá nhân",
  "is_admin": false
}
Hướng dẫn frontend:
Gọi API này sau khi đăng nhập để lấy thông tin người dùng
Lưu thông tin vào state/context để sử dụng trong ứng dụng
Kiểm tra trường is_admin để xác định quyền truy cập
6. Đăng xuất
POST /api/v1/auth/logout/
Headers:
Authorization: Bearer <JWT_ACCESS_TOKEN>
Request body:
{
  "refresh": "<JWT_REFRESH_TOKEN>"
}
Response:
{
  "status": "logout successful"
}
Hướng dẫn frontend:
Gọi API này khi người dùng muốn đăng xuất
Xóa token và thông tin người dùng khỏi localStorage/cookie
Chuyển hướng người dùng về trang đăng nhập
7. Phân quyền
Hệ thống phân quyền đơn giản:
is_admin: Xác định người dùng có quyền quản trị hay không
is_superuser: Quyền cao nhất (thường không sử dụng trực tiếp trong API)
Hướng dẫn frontend:
Kiểm tra user.is_admin === true để hiển thị giao diện quản trị
Kiểm tra quyền trước khi hiển thị các chức năng quản trị
Xử lý lỗi 403 Forbidden khi người dùng không có quyền truy cập
⚙️ 8. Quy trình tích hợp trong frontend
Đăng ký người dùng:
Tạo form đăng ký với các trường: username, email, password, first_name, last_name, bio
Validate dữ liệu trước khi gửi (email phải là Gmail, password ≥ 8 ký tự)
Gửi request POST đến /api/v1/accounts/users/
Xử lý response thành công/lỗi và thông báo cho người dùng
Đăng nhập:
Tạo form đăng nhập với các trường: email, password
Gửi request POST đến /api/v1/auth/token/
Lưu token vào localStorage/cookie và thông tin user vào state/context
Điều hướng đến trang chính
Quản lý token:
Tạo interceptor cho các HTTP request để tự động thêm Authorization header
Tạo logic xử lý lỗi 401 và refresh token
Implement auto-logout khi không thể refresh token
Quên mật khẩu:
Tạo form nhập email
Gửi request đến API gửi mã OTP
Tạo form nhập mã OTP và mật khẩu mới
Gửi request xác nhận và đặt mật khẩu mới
Thông báo kết quả và điều hướng về trang đăng nhập
Tải thông tin người dùng:
Gọi API /api/v1/accounts/users/me/ sau khi đăng nhập
Lưu thông tin vào state/context toàn cầu
Hiển thị thông tin người dùng trên giao diện
Kiểm tra quyền truy cập:
Tạo hàm tiện ích kiểm tra quyền (isAdmin, hasAccess)
Sử dụng trong các bảo vệ route và điều kiện hiển thị UI
Hiển thị thông báo phù hợp khi không có quyền
Bảo mật:
Không lưu mật khẩu dưới bất kỳ hình thức nào
Lưu token trong httpOnly cookie nếu có thể (tránh XSS)
Tự động làm mới token khi gần hết hạn
9. Header API Authentication
Tất cả API yêu cầu xác thực đều cần gửi header:
Authorization: Bearer <JWT_ACCESS_TOKEN>
Tuổi thọ token:
Access token: 60 phút
Refresh token: 1 ngày
