Phân Tích Hệ Thống Admin Trong Dự Án Django
1. Tổng Quan Hệ Thống Admin
Dự án hiện tại có hai loại hệ thống admin:
Django Admin tích hợp sẵn: Giao diện quản trị truyền thống Django
Custom Admin API: Các API đặc thù cho trang quản trị frontend
Hệ thống admin được bảo vệ bởi permission class IsAdminUser, yêu cầu trường is_staff=True trong model User.
2. API Quản Lý Người Dùng
2.1. Xem Hoạt Động Người Dùng
Endpoint: /api/v1/music/admin/user-activity/
View: AdminUserActivityView
HTTP Method: GET
Xác thực: IsAdminUser (chỉ admin được phép)
Phân trang: Có
Tham số (Query Params):
user_id (tùy chọn): Lọc theo ID người dùng cụ thể
Response (không có user_id):
{
  "top_listeners": [
    {
      "id": 5,
      "username": "user5",
      "play_count": 253,
      "playlist_count": 12,
      "date_joined": "2023-01-15T10:30:45Z",
      "last_login": "2023-04-28T14:25:30Z"
    },
    // ...thêm người dùng khác
  ],
  "new_users": [
    {
      "id": 10,
      "username": "newuser",
      "email": "new@example.com",
      "date_joined": "2023-04-25T08:15:30Z",
      "last_login": "2023-04-28T09:20:15Z"
    },
    // ...thêm người dùng khác
  ],
  "active_users": [
    {
      "id": 3,
      "username": "activeuser",
      "recent_plays": 45,
      "last_login": "2023-04-28T16:45:20Z"
    },
    // ...thêm người dùng khác
  ]
}
Response (có user_id):
{
  "user_info": {
    "id": 5,
    "username": "user5",
    "email": "user5@example.com",
    "date_joined": "2023-01-15T10:30:45Z",
    "last_login": "2023-04-28T14:25:30Z",
    "is_active": true
  },
  "play_history": [
    {
      "song_id": 25,
      "song_title": "Song Title",
      "song_artist": "Artist Name",
      "played_at": "2023-04-28T14:20:30Z"
    },
    // ...thêm lịch sử nghe
  ],
  "favorite_genres": {
    "Pop": 45,
    "Rock": 30,
    "Jazz": 15
  },
  "playlists": [
    // Chi tiết các playlist
  ],
  "favorite_songs": [
    // Chi tiết các bài hát yêu thích
  ],
  "daily_activity": {
    "2023-04-28": 15,
    "2023-04-27": 12,
    // ...thêm ngày khác
  }
}
2.2. Chi Tiết Người Dùng Cụ Thể
Endpoint: /api/v1/music/admin/user-activity/<int:user_id>/
View: AdminUserActivityView
HTTP Method: GET
Xác thực: IsAdminUser
Response: Giống như response khi có user_id ở trên
3. API Quản Lý Nội Dung Âm Nhạc
3.1. Thống Kê Tổng Quan
Endpoint: /api/v1/music/admin/statistics/
View: AdminStatisticsView
HTTP Method: GET
Xác thực: IsAdminUser
Response:
{
  "overview": {
    "total_songs": 2540,
    "total_playlists": 1230,
    "total_users": 850,
    "active_users": 450,
    "total_plays": 125000
  },
  "genre_stats": {
    "Pop": {
      "song_count": 550,
      "total_plays": 45000,
      "avg_plays": 81.82
    },
    // ...thêm thể loại khác
  },
  "monthly_plays": {
    "2023-04-28": 1250,
    "2023-04-27": 1180,
    // ...thêm ngày khác
  },
  "top_songs": [
    // Danh sách bài hát phổ biến
  ],
  "top_playlists": [
    // Danh sách playlist phổ biến
  ],
  "new_users": {
    "2023-04-28": 15,
    "2023-04-27": 12,
    // ...thêm ngày khác
  }
}
3.2. Báo Cáo Top Bài Hát
Endpoint: /api/v1/music/admin/reports/top-songs/
View: AdminTopSongsReportView
HTTP Method: GET
Xác thực: IsAdminUser
Tham số (Query Params):
period: Khoảng thời gian (mặc định: "month", các giá trị: "week", "month", "year", "all")
limit: Số lượng bài hát hiển thị (mặc định: 20)
Response:
{
  "period": "30 ngày qua",
  "generated_at": "2023-04-28 15:30:45",
  "results": [
    {
      "id": 25,
      "title": "Song Title",
      "artist": "Artist Name",
      "album": "Album Name",
      "total_plays": 1250,
      "recent_plays": 350,
      "likes": 180
    },
    // ...thêm bài hát khác
  ]
}
{
  "period": "30 ngày qua",
  "generated_at": "2023-04-28 15:30:45",
  "results": [
    {
      "id": 25,
      "title": "Song Title",
      "artist": "Artist Name",
      "album": "Album Name",
      "total_plays": 1250,
      "recent_plays": 350,
      "likes": 180
    },
    // ...thêm bài hát khác
  ]
}
3.3. Báo Cáo Top Thể Loại
Endpoint: /api/v1/music/admin/reports/top-genres/
View: AdminTopGenresReportView
HTTP Method: GET
Xác thực: IsAdminUser
Tham số (Query Params):
period: Khoảng thời gian (mặc định: "month")
Response (tương tự báo cáo top bài hát)
4. API Quản Lý Collaborative Playlist
4.1. Danh Sách Collaborative Playlist
Endpoint: /api/v1/music/admin/playlists/collaborative/
View: AdminCollaborativePlaylistListView
HTTP Method: GET
Xác thực: IsAdminUser
Phân trang: Có
Lọc/Tìm kiếm: Có
Tham số (Query Params):
owner_id: Lọc theo chủ sở hữu
collaborator_id: Lọc theo người cộng tác
created_after & created_before: Lọc theo khoảng thời gian tạo
search: Tìm kiếm theo tên, mô tả, username
ordering: Sắp xếp (ví dụ: name, -created_at)
Response:
{
  "count": 50,
  "next": "https://api.example.com/api/v1/music/admin/playlists/collaborative/?page=2",
  "previous": null,
  "results": [
    {
      "id": 15,
      "name": "Playlist Name",
      "description": "Playlist Description",
      "user": {
        "id": 5,
        "username": "user5",
        "avatar": "url_to_avatar"
      },
      "cover_image": "url_to_cover_image",
      "created_at": "2023-03-15T10:30:45Z",
      "updated_at": "2023-04-25T14:20:30Z",
      "is_collaborative": true,
      "collaborators": [
        // Danh sách người cộng tác
      ]
    },
    // ...thêm playlist khác
  ]
}
4.2. Chi Tiết Collaborative Playlist
Endpoint: /api/v1/music/admin/playlists/collaborative/<int:pk>/
View: AdminCollaborativePlaylistDetailView
HTTP Method: GET, PUT, PATCH, DELETE
Xác thực: IsAdminUser
Request Body (PUT/PATCH):
{
  "name": "New Playlist Name",
  "description": "New Description",
  "is_public": true
}
Response: Chi tiết playlist
4.3. Danh Sách Người Cộng Tác
Endpoint: /api/v1/music/admin/playlists/<int:playlist_id>/collaborators/
View: AdminPlaylistCollaboratorsView
HTTP Method: GET
Xác thực: IsAdminUser
Response: Danh sách người cộng tác và vai trò
4.4. Thêm Người Cộng Tác
Endpoint: /api/v1/music/admin/playlists/<int:playlist_id>/collaborators/add/
View: AdminAddCollaboratorView
HTTP Method: POST
Xác thực: IsAdminUser
Request Body:
{
  "user": 7,
  "role": "EDITOR"
}
Response: Thông tin người cộng tác đã thêm
4.5. Xóa Người Cộng Tác
Endpoint: /api/v1/music/admin/playlists/<int:playlist_id>/collaborators/<int:user_id>/
View: AdminRemoveCollaboratorView
HTTP Method: DELETE
Xác thực: IsAdminUser
Response: HTTP 204 No Content (thành công)
4.6. Thay Đổi Vai Trò Người Cộng Tác
Endpoint: /api/v1/music/admin/playlists/<int:playlist_id>/collaborators/<int:user_id>/role/
View: AdminChangeCollaboratorRoleView
HTTP Method: POST
Xác thực: IsAdminUser
Request Body:
{
  "role": "VIEWER"
}
Response: Thông tin vai trò đã cập nhật
4.7. Lịch Sử Chỉnh Sửa Playlist
Endpoint: /api/v1/music/admin/playlists/<int:playlist_id>/edit_history/
View: AdminPlaylistEditHistoryView
HTTP Method: GET
Xác thực: IsAdminUser
Response: Danh sách các thay đổi của playlist
4.8. Khôi Phục Playlist
Endpoint: /api/v1/music/admin/playlists/<int:playlist_id>/restore/
View: AdminRestorePlaylistView
HTTP Method: POST
Xác thực: IsAdminUser
Request Body:
{
  "history_id": 25
}
Response: Trạng thái khôi phục
5. Cơ Chế Phân Quyền
5.1. Xác Thực Admin
Toàn bộ API admin đều áp dụng permission class IsAdminUser hoặc permissions.IsAdminUser, đảm bảo chỉ người dùng có is_staff=True mới được truy cập.

# Ví dụ trong code
class AdminStatisticsView(APIView):
    """View hiển thị thống kê tổng quan cho admin"""
    permission_classes = [permissions.IsAdminUser]
5.2. JWT Authentication
Hệ thống sử dụng JWT Token Authentication, với cấu hình:
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}
JWT Token cần được gửi trong header cho mỗi request API:
Authorization: Bearer <token>
6. Tính Năng Lọc, Phân Trang và Tìm Kiếm
6.1. Lọc Dữ Liệu
Nhiều API Admin hỗ trợ lọc qua query parameters:
# Ví dụ: Lọc playlist theo chủ sở hữu
/api/v1/music/admin/playlists/collaborative/?owner_id=5
6.2. Phân Trang
Kết quả phân trang được trả về với cấu trúc:
{
  "count": 100,
  "next": "https://api.example.com/endpoint/?page=2",
  "previous": null,
  "results": [
    // các mục
  ]
}
Để điều chỉnh số lượng mục trên mỗi trang:
/api/v1/music/admin/playlists/collaborative/?page=2&page_size=20
6.3. Tìm Kiếm
# Ví dụ: Tìm playlist theo tên
/api/v1/music/admin/playlists/collaborative/?search=summer
6.4. Sắp Xếp
# Sắp xếp theo tên
/api/v1/music/admin/playlists/collaborative/?ordering=name

# Sắp xếp theo thời gian tạo giảm dần
/api/v1/music/admin/playlists/collaborative/?ordering=-created_at

7. Tích Hợp Django Admin Mặc Định
Ngoài các API custom, backend còn có Django Admin truyền thống tại /admin/. Frontend team nên biết là có chức năng này dành cho chức năng quản trị chuyên sâu, bao gồm:
Quản lý người dùng: /admin/accounts/user/
Quản lý bài hát: /admin/music/song/
Quản lý playlist: /admin/music/playlist/
Quản lý album: /admin/music/album/
Quản lý nghệ sĩ: /admin/music/artist/
Quản lý download: /admin/music/offlinedownload/
8. Đề Xuất Triển Khai Frontend Admin
8.1. Cấu Trúc Giao Diện Đề Xuất
Dashboard: Hiển thị thống kê tổng quan (gọi API /api/v1/music/admin/statistics/)
Biểu đồ thống kê người dùng, lượt nghe, bài hát theo thời gian
Top bài hát, nghệ sĩ, playlist
Quản lý Người dùng:
Danh sách người dùng với bộ lọc (active, new, top listeners)
Trang chi tiết người dùng với lịch sử hoạt động
Quản lý Nội dung:
Tab quản lý playlist, bài hát, album
Tính năng duyệt, xóa, chỉnh sửa
Xem lịch sử chỉnh sửa
Báo cáo:
Báo cáo top bài hát/thể loại
Biểu đồ thống kê theo thời gian/thể loại
8.2. Hướng Dẫn Triển Khai
Xác thực Admin:
   // Kiểm tra người dùng có quyền admin không
   function checkAdminRole(user) {
     return user && user.is_staff === true;
   }
   
   // Thêm JWT token vào header cho mọi request
   const headers = {
     'Authorization': `Bearer ${jwtToken}`,
     'Content-Type': 'application/json'
   };
Hiển thị Dashboard:
   // Lấy dữ liệu thống kê
   fetch('/api/v1/music/admin/statistics/', { headers })
     .then(response => response.json())
     .then(stats => {
       // Hiển thị thống kê tổng quan
       renderOverview(stats.overview);
       
       // Hiển thị biểu đồ thể loại nhạc
       renderGenreChart(stats.genre_stats);
       
       // Hiển thị biểu đồ lượt nghe theo thời gian
       renderPlaysTimelineChart(stats.monthly_plays);
       
       // Hiển thị top bài hát và playlist
       renderTopContent(stats.top_songs, stats.top_playlists);
     });
Quản lý Người dùng
   // Lấy danh sách hoạt động người dùng
   fetch('/api/v1/music/admin/user-activity/', { headers })
     .then(response => response.json())
     .then(data => {
       // Hiển thị danh sách người dùng theo từng loại
       renderUsersList(data);
     });
   
   // Xem chi tiết người dùng
   function viewUserDetails(userId) {
     fetch(`/api/v1/music/admin/user-activity/${userId}/`, { headers })
       .then(response => response.json())
       .then(userDetail => {
         // Hiển thị chi tiết người dùng
         renderUserDetail(userDetail);
       });
   }
Quản lý Playlist hợp tác
   // Lấy danh sách playlist hợp tác
   const filters = new URLSearchParams({
     page: currentPage,
     page_size: 10,
     ordering: '-created_at'
   });
   
   if (searchTerm) filters.append('search', searchTerm);
   if (ownerId) filters.append('owner_id', ownerId);
   
   fetch(`/api/v1/music/admin/playlists/collaborative/?${filters}`, { headers })
     .then(response => response.json())
     .then(data => {
       renderPlaylists(data.results);
       renderPagination(data.count, data.next, data.previous);
     });
   
   // Thêm người cộng tác
   function addCollaborator(playlistId, userId, role) {
     fetch(`/api/v1/music/admin/playlists/${playlistId}/collaborators/add/`, {
       method: 'POST',
       headers,
       body: JSON.stringify({ user: userId, role })
     })
     .then(response => response.json())
     .then(result => {
       showNotification('Đã thêm người cộng tác thành công');
       refreshCollaboratorsList(playlistId);
     });
   }
Báo cáo và Thống kê
   // Lấy báo cáo top bài hát
   function fetchTopSongsReport(period = 'month', limit = 20) {
     fetch(`/api/v1/music/admin/reports/top-songs/?period=${period}&limit=${limit}`, { headers })
       .then(response => response.json())
       .then(report => {
         renderTopSongsReport(report);
       });
   }
8.3. Tính Năng Nâng Cao
Biểu đồ tương tác: Sử dụng thư viện như Chart.js để tạo biểu đồ từ dữ liệu thống kê.
Bảng dữ liệu phân trang và lọc: Sử dụng thư viện như React Table để hiển thị dữ liệu với đầy đủ tính năng lọc, phân trang và tìm kiếm.
Export dữ liệu: Tạo chức năng xuất báo cáo ra PDF hoặc Excel dựa trên dữ liệu từ API.
Cảnh báo thời gian thực: Tích hợp WebSocket để nhận thông báo khi có người dùng mới đăng ký, đăng nhập bất thường, hoặc nội dung bị báo cáo.
9. Kết Luận
Hệ thống admin của dự án đã được thiết kế khá đầy đủ với nhiều API quản lý và báo cáo. Frontend team nên tận dụng các API này để xây dựng giao diện quản trị linh hoạt và mạnh mẽ.
Điểm mạnh của hệ thống là khả năng lọc, phân trang và tìm kiếm linh hoạt, cùng với các báo cáo chi tiết về hoạt động người dùng và nội dung, giúp admin dễ dàng theo dõi và quản lý hệ thống.